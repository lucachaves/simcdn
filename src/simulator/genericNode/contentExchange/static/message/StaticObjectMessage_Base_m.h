//
// Generated file, do not edit! Created by opp_msgc 4.1 from src/simulator/genericNode/contentExchange/static/message/StaticObjectMessage_Base.msg.
//

#ifndef _STATICOBJECTMESSAGE_BASE_M_H_
#define _STATICOBJECTMESSAGE_BASE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif



/**
 * Class generated from <tt>src/simulator/genericNode/contentExchange/static/message/StaticObjectMessage_Base.msg</tt> by opp_msgc.
 * <pre>
 * packet StaticObjectMessage
 * {
 *     @customize(true);
 * }
 * </pre>
 *
 * StaticObjectMessage_Base is only useful if it gets subclassed, and StaticObjectMessage is derived from it.
 * The minimum code to be written for StaticObjectMessage is the following:
 *
 * <pre>
 * class StaticObjectMessage : public StaticObjectMessage_Base
 * {
 *   public:
 *     StaticObjectMessage(const char *name=NULL, int kind=0) : StaticObjectMessage_Base(name,kind) {}
 *     StaticObjectMessage(const StaticObjectMessage& other) : StaticObjectMessage_Base(other.getName()) {operator=(other);}
 *     StaticObjectMessage& operator=(const StaticObjectMessage& other) {StaticObjectMessage_Base::operator=(other); return *this;}
 *     virtual StaticObjectMessage *dup() const {return new StaticObjectMessage(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from StaticObjectMessage_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(StaticObjectMessage);
 * </pre>
 */
class StaticObjectMessage_Base : public ::cPacket
{
  protected:

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const StaticObjectMessage_Base&);
    // make constructors protected to avoid instantiation
    StaticObjectMessage_Base(const char *name=NULL, int kind=0);
    StaticObjectMessage_Base(const StaticObjectMessage_Base& other);
    // make assignment operator protected to force the user override it
    StaticObjectMessage_Base& operator=(const StaticObjectMessage_Base& other);

  public:
    virtual ~StaticObjectMessage_Base();
    virtual StaticObjectMessage_Base *dup() const {throw cRuntimeError("You forgot to manually add a dup() function to class StaticObjectMessage");}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};


#endif // _STATICOBJECTMESSAGE_BASE_M_H_
